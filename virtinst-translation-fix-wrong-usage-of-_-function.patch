From 6d42b70de064ce4f40da7644810434af11cb28c2 Mon Sep 17 00:00:00 2001
From: Pavel Hrdina <phrdina@redhat.com>
Date: Tue, 2 Jun 2015 13:22:25 +0200
Subject: [PATCH] translation: fix wrong usage of _() function

All the strings have to be at first translated and then we can fill the
formated and translated string.

RHEL-only

Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=1223651

Signed-off-by: Pavel Hrdina <phrdina@redhat.com>
---
 virt-convert                   |  6 +++---
 virt-install                   |  6 +++---
 virtconv/parsers/ovf.py        |  2 +-
 virtinst/CloneManager.py       |  2 +-
 virtinst/DistroInstaller.py    |  4 ++--
 virtinst/Guest.py              |  2 +-
 virtinst/ImageInstaller.py     |  4 ++--
 virtinst/ImageParser.py        |  2 +-
 virtinst/Interface.py          |  4 ++--
 virtinst/OSDistro.py           |  6 +++---
 virtinst/Storage.py            | 34 +++++++++++++++++-----------------
 virtinst/VirtualAudio.py       |  4 ++--
 virtinst/VirtualCharDevice.py  |  2 +-
 virtinst/VirtualDisk.py        | 20 ++++++++++----------
 virtinst/VirtualFilesystem.py  |  4 ++--
 virtinst/VirtualRedirDevice.py |  4 ++--
 virtinst/VirtualWatchdog.py    |  2 +-
 virtinst/XMLBuilderDomain.py   |  2 +-
 virtinst/cli.py                | 10 +++++-----
 19 files changed, 60 insertions(+), 60 deletions(-)

diff --git a/virt-convert b/virt-convert
index 0aaa366..bddb9b3 100755
--- a/virt-convert
+++ b/virt-convert
@@ -115,10 +115,10 @@ def parse_args():
         options.output_dir = os.path.dirname(os.path.realpath(args[1]))
 
     if options.output_format not in formats.formats():
-        opts.error(_("Unknown output format \"%s\")" % options.output_format))
+        opts.error(_("Unknown output format \"%s\")") % options.output_format)
     if options.output_format not in formats.output_formats():
-        opts.error(_("No output handler for format \"%s\")"
-            % options.output_format))
+        opts.error(_("No output handler for format \"%s\")")
+            % options.output_format)
 
     if not os.access(args[0], os.R_OK):
         opts.error(_("Couldn't access input argument \"%s\"\n") % args[0])
diff --git a/virt-install b/virt-install
index f094c4f..fd39dfd 100755
--- a/virt-install
+++ b/virt-install
@@ -142,7 +142,7 @@ def get_disk(diskopts, size, sparse, guest, is_file_path):
                             origdev=dev)
 
     except ValueError, e:
-        fail(_("Error with storage parameters: %s" % str(e)))
+        fail(_("Error with storage parameters: %s") % str(e))
 
     guest.disks.append(d)
 
@@ -303,7 +303,7 @@ def get_install_media(guest, location, cdpath, need_install):
         else:
             validate_install_media(guest, location, cdpath, cdinstall)
     except ValueError, e:
-        fail(_("Error validating install location: %s" % str(e)))
+        fail(_("Error validating install location: %s") % str(e))
 
 def media_prompt(guest):
     if guest.installer.is_hvm():
@@ -734,7 +734,7 @@ def check_domain(guest, dom, conscb, wait_for_install, wait_time, start_time):
                 dom = guest.conn.lookupByName(guest.name)
             except Exception, e:
                 raise RuntimeError(_("Could not lookup domain after "
-                                     "install: %s" % str(e)))
+                                     "install: %s") % str(e))
             break
 
         time_elapsed = (time.time() - start_time)
diff --git a/virtconv/parsers/ovf.py b/virtconv/parsers/ovf.py
index 743aaea..5a54be0 100644
--- a/virtconv/parsers/ovf.py
+++ b/virtconv/parsers/ovf.py
@@ -232,7 +232,7 @@ def _parse_hw_section(vm, nodes, file_refs, disk_section):
                     ref = path[len("ovf:/file/"):]
 
                 else:
-                    raise ValueError(_("Unknown storage path type %s." % path))
+                    raise ValueError(_("Unknown storage path type %s.") % path)
 
                 if not ref:
                     # XXX: This means allocate the disk.
diff --git a/virtinst/CloneManager.py b/virtinst/CloneManager.py
index 8dbd3e4..07c5105 100644
--- a/virtinst/CloneManager.py
+++ b/virtinst/CloneManager.py
@@ -613,7 +613,7 @@ class CloneDesign(object):
             except Exception, e:
                 _util.log_exception(e)
                 raise ValueError(_("Could not determine original disk "
-                                   "information: %s" % str(e)))
+                                   "information: %s") % str(e))
             disks.append(d)
 
         return disks
diff --git a/virtinst/DistroInstaller.py b/virtinst/DistroInstaller.py
index c194f0c..3aa5ee9 100644
--- a/virtinst/DistroInstaller.py
+++ b/virtinst/DistroInstaller.py
@@ -187,7 +187,7 @@ class DistroInstaller(Installer.Installer):
 
         # Basic validation
         if type(val) is not str and (type(val) is not tuple and len(val) != 2):
-            raise ValueError(_("Invalid 'location' type %s." % type(val)))
+            raise ValueError(_("Invalid 'location' type %s.") % type(val))
 
         if type(val) is tuple and len(val) == 2:
             logging.debug("DistroInstaller location is a (poolname, volname)"
@@ -232,7 +232,7 @@ class DistroInstaller(Installer.Installer):
             except Exception, e:
                 logging.debug(str(e))
                 raise ValueError(_("Checking installer location failed: "
-                                   "Could not find media '%s'." % str(val)))
+                                   "Could not find media '%s'.") % str(val))
         elif not validated:
             raise ValueError(_("Install media location must be an NFS, HTTP "
                                "or FTP network install source, or an existing "
diff --git a/virtinst/Guest.py b/virtinst/Guest.py
index 1d39b62..2c6fca0 100644
--- a/virtinst/Guest.py
+++ b/virtinst/Guest.py
@@ -465,7 +465,7 @@ class Guest(XMLBuilderDomain.XMLBuilderDomain):
                     found = True
 
             if not found:
-                raise ValueError(_("Unknown OS variant '%s'" % val))
+                raise ValueError(_("Unknown OS variant '%s'") % val)
 
     os_variant = property(get_os_variant, set_os_variant)
 
diff --git a/virtinst/ImageInstaller.py b/virtinst/ImageInstaller.py
index d8f2494..b3aa79d 100644
--- a/virtinst/ImageInstaller.py
+++ b/virtinst/ImageInstaller.py
@@ -59,8 +59,8 @@ class ImageInstaller(Installer.Installer):
                                                       self.boot_caps.arch)
         if self._guest is None:
             raise PlatformMatchException(_("Unsupported virtualization type: "
-                                           "%s %s" % (self.boot_caps.type,
-                                                      self.boot_caps.arch)))
+                                           "%s %s") % (self.boot_caps.type,
+                                                       self.boot_caps.arch))
 
         self.os_type = self.boot_caps.type
         self._domain = self._guest.bestDomainType()
diff --git a/virtinst/ImageParser.py b/virtinst/ImageParser.py
index 3ef8779..b672bb4 100644
--- a/virtinst/ImageParser.py
+++ b/virtinst/ImageParser.py
@@ -262,7 +262,7 @@ class Disk:
         disk_size = os.path.getsize(self.file)
         if meter:
             meter.start(size=disk_size,
-                        text=_("Checking disk signature for %s" % self.file))
+                        text=_("Checking disk signature for %s") % self.file)
 
         f = file(self.file)
         while 1:
diff --git a/virtinst/Interface.py b/virtinst/Interface.py
index 46f3119..f1ae0be 100644
--- a/virtinst/Interface.py
+++ b/virtinst/Interface.py
@@ -239,14 +239,14 @@ class Interface(object):
         try:
             iface = self.conn.interfaceDefineXML(xml, 0)
         except Exception, e:
-            raise RuntimeError(_("Could not define interface: %s" % str(e)))
+            raise RuntimeError(_("Could not define interface: %s") % str(e))
 
         errmsg = None
         if create and not errmsg:
             try:
                 iface.create(0)
             except Exception, e:
-                errmsg = _("Could not create interface: %s" % str(e))
+                errmsg = _("Could not create interface: %s") % str(e)
 
         if errmsg:
             # Try and clean up the leftover pool
diff --git a/virtinst/OSDistro.py b/virtinst/OSDistro.py
index 8b90c44..83cc2ca 100644
--- a/virtinst/OSDistro.py
+++ b/virtinst/OSDistro.py
@@ -288,8 +288,8 @@ class Distro:
             for path in self._boot_iso_paths:
                 if fetcher.hasFile(path):
                     return fetcher.acquireFile(path, progresscb)
-            raise RuntimeError(_("Could not find boot.iso in %s tree." % \
-                               self.name))
+            raise RuntimeError(_("Could not find boot.iso in %s tree.") % \
+                               self.name)
 
     def get_osdict_info(self):
         """
@@ -452,7 +452,7 @@ class GenericDistro(Distro):
     def acquireKernel(self, guest, fetcher, progresscb):
         if self._valid_kernel_path == None:
             raise ValueError(_("Could not find a kernel path for virt type "
-                               "'%s'" % self.type))
+                               "'%s'") % self.type)
 
         return self._kernelFetchHelper(fetcher, guest, progresscb,
                                        self._valid_kernel_path[0],
diff --git a/virtinst/Storage.py b/virtinst/Storage.py
index 5804e2f..c015d24 100644
--- a/virtinst/Storage.py
+++ b/virtinst/Storage.py
@@ -179,7 +179,7 @@ class StorageObject(object):
     # Validation helper functions
     def _validate_path(self, path):
         if type(path) is not type("str") or not path.startswith("/"):
-            raise ValueError(_("'%s' is not an absolute path." % path))
+            raise ValueError(_("'%s' is not an absolute path.") % path)
 
     def _check_name_collision(self, name):
         ignore = name
@@ -267,7 +267,7 @@ class StoragePool(StorageObject):
         @type ptype: C{str} member of L{Types}
         """
         if ptype not in StoragePool._types:
-            raise ValueError(_("Unknown storage pool type: %s" % ptype))
+            raise ValueError(_("Unknown storage pool type: %s") % ptype)
         if ptype == StoragePool.TYPE_DIR:
             return DirectoryPool
         if ptype == StoragePool.TYPE_FS:
@@ -357,7 +357,7 @@ class StoragePool(StorageObject):
                                name=name, conn=conn)
 
         if type not in self.get_pool_types():
-            raise ValueError(_("Unknown storage pool type: %s" % type))
+            raise ValueError(_("Unknown storage pool type: %s") % type)
         self._type = type
         self._target_path = None
         self._host = None
@@ -458,7 +458,7 @@ class StoragePool(StorageObject):
         try:
             pool = self.conn.storagePoolDefineXML(xml, 0)
         except Exception, e:
-            raise RuntimeError(_("Could not define storage pool: %s" % str(e)))
+            raise RuntimeError(_("Could not define storage pool: %s") % str(e))
 
         errmsg = None
         if build:
@@ -468,7 +468,7 @@ class StoragePool(StorageObject):
             try:
                 pool.build(libvirt.VIR_STORAGE_POOL_BUILD_NEW)
             except Exception, e:
-                errmsg = _("Could not build storage pool: %s" % str(e))
+                errmsg = _("Could not build storage pool: %s") % str(e)
             if meter:
                 #meter.end(0)
                 pass
@@ -477,13 +477,13 @@ class StoragePool(StorageObject):
             try:
                 pool.create(0)
             except Exception, e:
-                errmsg = _("Could not start storage pool: %s" % str(e))
+                errmsg = _("Could not start storage pool: %s") % str(e)
 
         if autostart and not errmsg:
             try:
                 pool.setAutostart(True)
             except Exception, e:
-                errmsg = _("Could not set pool autostart flag: %s" % str(e))
+                errmsg = _("Could not set pool autostart flag: %s") % str(e)
 
         if errmsg:
             # Try and clean up the leftover pool
@@ -567,7 +567,7 @@ class FilesystemPool(StoragePool):
         return self._format
     def set_format(self, val):
         if not val in self.formats:
-            raise ValueError(_("Unknown Filesystem format: %s" % val))
+            raise ValueError(_("Unknown Filesystem format: %s") % val)
         self._format = val
     format = property(get_format, set_format,
                       doc=_("Filesystem type of the source device."))
@@ -625,7 +625,7 @@ class NetworkFilesystemPool(StoragePool):
         return self._format
     def set_format(self, val):
         if not val in self.formats:
-            raise ValueError(_("Unknown Network Filesystem format: %s" % val))
+            raise ValueError(_("Unknown Network Filesystem format: %s") % val)
         self._format = val
     format = property(get_format, set_format,
                       doc=_("Type of network filesystem."))
@@ -780,7 +780,7 @@ class DiskPool(StoragePool):
         return self._format
     def set_format(self, val):
         if not val in self.formats:
-            raise ValueError(_("Unknown Disk format: %s" % val))
+            raise ValueError(_("Unknown Disk format: %s") % val)
         self._format = val
     format = property(get_format, set_format,
                       doc=_("Format of the source device's partition table."))
@@ -1115,8 +1115,8 @@ class StorageVolume(StorageObject):
             try:
                 pool_object = conn.storagePoolLookupByName(pool_name)
             except Exception, e:
-                raise ValueError(_("Couldn't find storage pool '%s': %s" % \
-                                   (pool_name, str(e))))
+                raise ValueError(_("Couldn't find storage pool '%s': %s") % \
+                                   (pool_name, str(e)))
 
         if not isinstance(pool_object, libvirt.virStoragePool):
             raise ValueError(_("pool_object must be a virStoragePool"))
@@ -1176,7 +1176,7 @@ class StorageVolume(StorageObject):
         if not isinstance(newpool, libvirt.virStoragePool):
             raise ValueError(_("'pool' must be a virStoragePool instance."))
         if newpool.info()[0] != libvirt.VIR_STORAGE_POOL_RUNNING:
-            raise ValueError(_("pool '%s' must be active." % newpool.name()))
+            raise ValueError(_("pool '%s' must be active.") % newpool.name())
         self._pool = newpool
     pool = property(get_pool, set_pool)
 
@@ -1334,16 +1334,16 @@ class StorageVolume(StorageObject):
         if self.allocation > avail:
             return (True, _("There is not enough free space on the storage "
                             "pool to create the volume. "
-                            "(%d M requested allocation > %d M available)" % \
+                            "(%d M requested allocation > %d M available)") % \
                             ((self.allocation / (1024 * 1024)),
-                             (avail / (1024 * 1024)))))
+                             (avail / (1024 * 1024))))
         elif self.capacity > avail:
             return (False, _("The requested volume capacity will exceed the "
                              "available pool space when the volume is fully "
                              "allocated. "
-                             "(%d M requested capacity > %d M available)" % \
+                             "(%d M requested capacity > %d M available)") % \
                              ((self.capacity / (1024 * 1024)),
-                              (avail / (1024 * 1024)))))
+                              (avail / (1024 * 1024))))
         return (False, "")
 
 class FileVolume(StorageVolume):
diff --git a/virtinst/VirtualAudio.py b/virtinst/VirtualAudio.py
index 66f7a49..b1deead 100644
--- a/virtinst/VirtualAudio.py
+++ b/virtinst/VirtualAudio.py
@@ -46,9 +46,9 @@ class VirtualAudio(VirtualDevice.VirtualDevice):
     def set_model(self, new_model):
         if type(new_model) != str:
             raise ValueError(_("'model' must be a string, "
-                               " was '%s'." % type(new_model)))
+                               " was '%s'.") % type(new_model))
         if not self.MODELS.count(new_model):
-            raise ValueError(_("Unsupported sound model '%s'" % new_model))
+            raise ValueError(_("Unsupported sound model '%s'") % new_model)
         self._model = new_model
     model = _xml_property(get_model, set_model,
                           xpath="./@model")
diff --git a/virtinst/VirtualCharDevice.py b/virtinst/VirtualCharDevice.py
index 6d72beb..3abc420 100644
--- a/virtinst/VirtualCharDevice.py
+++ b/virtinst/VirtualCharDevice.py
@@ -384,7 +384,7 @@ class VirtualCharDevice(VirtualDevice.VirtualDevice):
             file_xml = " path='%s'" % xml_escape(self.source_path)
         else:
             raise ValueError(_("A source path is required for character "
-                               "device type '%s'" % self.char_type))
+                               "device type '%s'") % self.char_type)
 
         if self.supports_property("source_mode") and self.source_mode:
             mode_xml = " mode='%s'" % xml_escape(self.source_mode)
diff --git a/virtinst/VirtualDisk.py b/virtinst/VirtualDisk.py
index 4a642ee..95a0338 100644
--- a/virtinst/VirtualDisk.py
+++ b/virtinst/VirtualDisk.py
@@ -229,7 +229,7 @@ def _build_vol_install(path, pool, size, sparse):
     # pool, and if so, setup a StorageVolume object
     if size == None:
         raise ValueError(_("Size must be specified for non "
-                           "existent volume path '%s'" % path))
+                           "existent volume path '%s'") % path)
 
     logging.debug("Path '%s' is target for pool '%s'. "
                   "Creating volume '%s'." %
@@ -533,7 +533,7 @@ class VirtualDisk(VirtualDevice):
             pool = conn.storagePoolLookupByName(name_tuple[0])
             return pool.storageVolLookupByName(name_tuple[1])
         except Exception, e:
-            raise ValueError(_("Couldn't lookup volume object: %s" % str(e)))
+            raise ValueError(_("Couldn't lookup volume object: %s") % str(e))
 
     def __init__(self, path=None, size=None, transient=False, type=None,
                  device=None, driverName=None, driverType=None,
@@ -762,7 +762,7 @@ class VirtualDisk(VirtualDevice):
         if val is not None:
             self._check_str(val, "type")
             if val not in self.types:
-                raise ValueError(_("Unknown storage type '%s'" % val))
+                raise ValueError(_("Unknown storage type '%s'") % val)
         self.__validate_wrapper("_type", val, validate, self.type)
     type = _xml_property(get_type, set_type,
                          xpath="./@type")
@@ -772,7 +772,7 @@ class VirtualDisk(VirtualDevice):
     def set_device(self, val, validate=True):
         self._check_str(val, "device")
         if val not in self.devices:
-            raise ValueError(_("Unknown device type '%s'" % val))
+            raise ValueError(_("Unknown device type '%s'") % val)
 
         if val == self._device:
             return
@@ -853,7 +853,7 @@ class VirtualDisk(VirtualDevice):
         if val is not None:
             self._check_str(val, "cache")
             if val not in self.cache_types:
-                raise ValueError(_("Unknown cache mode '%s'" % val))
+                raise ValueError(_("Unknown cache mode '%s'") % val)
         self.__validate_wrapper("_driver_cache", val, validate,
                                 self.driver_cache)
     driver_cache = _xml_property(_get_driver_cache, _set_driver_cache,
@@ -866,7 +866,7 @@ class VirtualDisk(VirtualDevice):
         if val is not None:
             self._check_str(val, "driver_io")
             if val not in self.io_modes:
-                raise ValueError(_("Unknown io mode '%s'" % val))
+                raise ValueError(_("Unknown io mode '%s'") % val)
         self.__validate_wrapper("_driver_io", val, validate,
                                 self.driver_io)
     driver_io = _xml_property(_get_driver_io, _set_driver_io,
@@ -878,7 +878,7 @@ class VirtualDisk(VirtualDevice):
         if val is not None:
             self._check_str(val, "error_policy")
             if val not in self.error_policies:
-                raise ValueError(_("Unknown error policy '%s'" % val))
+                raise ValueError(_("Unknown error policy '%s'") % val)
         self.__validate_wrapper("_error_policy", val, validate,
                                 self.error_policy)
     error_policy = _xml_property(_get_error_policy, _set_error_policy,
@@ -1263,7 +1263,7 @@ class VirtualDisk(VirtualDevice):
                                  os.path.dirname(self.path))
             if self.size is None:
                 raise ValueError(_("size is required for non-existent disk "
-                                   "'%s'" % self.path))
+                                   "'%s'") % self.path)
             if not os.access(os.path.dirname(self.path), os.W_OK):
                 raise ValueError(_("No write access to directory '%s'") %
                                    os.path.dirname(self.path))
@@ -1317,7 +1317,7 @@ class VirtualDisk(VirtualDevice):
             # Create vdisk
             progresscb.update(1024)
             if not _vdisk_create(self.path, size_bytes, "vmdk", self.sparse):
-                raise RuntimeError(_("Error creating vdisk %s" % self.path))
+                raise RuntimeError(_("Error creating vdisk %s") % self.path)
 
             progresscb.end(self.size)
         else:
@@ -1773,7 +1773,7 @@ class VirtualDisk(VirtualDevice):
             if t.startswith(prefix) and t not in skip_targets:
                 self.target = t
                 return self.target
-        raise ValueError(_("No more space for disks of type '%s'" % prefix))
+        raise ValueError(_("No more space for disks of type '%s'") % prefix)
 
 
 class XenDisk(VirtualDisk):
diff --git a/virtinst/VirtualFilesystem.py b/virtinst/VirtualFilesystem.py
index 5732a9e..70d9bd5 100644
--- a/virtinst/VirtualFilesystem.py
+++ b/virtinst/VirtualFilesystem.py
@@ -79,7 +79,7 @@ class VirtualFilesystem(VirtualDevice.VirtualDevice):
         return self._type
     def _set_type(self, val):
         if val is not None and not self.TYPES.count(val):
-            raise ValueError(_("Unsupported filesystem type '%s'" % val))
+            raise ValueError(_("Unsupported filesystem type '%s'") % val)
         self._type = val
     type = _xml_property(_get_type, _set_type, xpath="./@type")
 
@@ -87,7 +87,7 @@ class VirtualFilesystem(VirtualDevice.VirtualDevice):
         return self._mode
     def _set_mode(self, val):
         if val is not None and not self.MOUNT_MODES.count(val):
-            raise ValueError(_("Unsupported filesystem mode '%s'" % val))
+            raise ValueError(_("Unsupported filesystem mode '%s'") % val)
         self._mode = val
     mode = _xml_property(_get_mode, _set_mode, xpath="./@accessmode")
 
diff --git a/virtinst/VirtualRedirDevice.py b/virtinst/VirtualRedirDevice.py
index 602d237..3e3c8df 100644
--- a/virtinst/VirtualRedirDevice.py
+++ b/virtinst/VirtualRedirDevice.py
@@ -64,7 +64,7 @@ class VirtualRedirDevice(VirtualDevice.VirtualDevice):
         return self._bus
     def set_bus(self, new_val):
         if new_val not in self.buses:
-            raise ValueError(_("Unsupported bus '%s'" % new_val))
+            raise ValueError(_("Unsupported bus '%s'") % new_val)
         self._bus = new_val
     bus = _xml_property(get_bus, set_bus,
                         xpath="./@bus")
@@ -77,7 +77,7 @@ class VirtualRedirDevice(VirtualDevice.VirtualDevice):
         return self._type
     def set_type(self, new_val):
         if new_val not in self.types:
-            raise ValueError(_("Unsupported redirection type '%s'" % new_val))
+            raise ValueError(_("Unsupported redirection type '%s'") % new_val)
         self._type = new_val
     type = _xml_property(get_type, set_type,
                          xpath="./@type")
diff --git a/virtinst/VirtualWatchdog.py b/virtinst/VirtualWatchdog.py
index f55c8b5..9610014 100644
--- a/virtinst/VirtualWatchdog.py
+++ b/virtinst/VirtualWatchdog.py
@@ -75,7 +75,7 @@ class VirtualWatchdog(VirtualDevice.VirtualDevice):
             raise ValueError(_("'model' must be a string, "
                                 " was '%s'." % type(new_model)))
         if not self.MODELS.count(new_model):
-            raise ValueError(_("Unsupported watchdog model '%s'" % new_model))
+            raise ValueError(_("Unsupported watchdog model '%s'") % new_model)
         self._model = new_model
     model = _xml_property(get_model, set_model,
                           xpath="./@model")
diff --git a/virtinst/XMLBuilderDomain.py b/virtinst/XMLBuilderDomain.py
index 274f964..308873d 100644
--- a/virtinst/XMLBuilderDomain.py
+++ b/virtinst/XMLBuilderDomain.py
@@ -446,7 +446,7 @@ class XMLBuilderDomain(object):
 
     def _check_bool(self, val, name):
         if val not in [True, False]:
-            raise ValueError(_("'%s' must be True or False" % name))
+            raise ValueError(_("'%s' must be True or False") % name)
 
     def _check_str(self, val, name):
         if type(val) is not str:
diff --git a/virtinst/cli.py b/virtinst/cli.py
index a5d9ca1..5ff1c9e 100644
--- a/virtinst/cli.py
+++ b/virtinst/cli.py
@@ -667,7 +667,7 @@ def disk_prompt(conn, origpath, origsize, origsparse,
         does_collide = (path_exists and
                         dev.type == dev.TYPE_FILE and
                         dev.device == dev.DEVICE_DISK)
-        msg = (_("This will overwrite the existing path '%s'" % dev.path))
+        msg = (_("This will overwrite the existing path '%s'") % dev.path)
 
         if not does_collide:
             return False
@@ -680,7 +680,7 @@ def disk_prompt(conn, origpath, origsize, origsparse,
         """
         Check if disk is inuse by another guest
         """
-        msg = (_("Disk %s is already in use by another guest" % dev.path))
+        msg = (_("Disk %s is already in use by another guest") % dev.path)
 
         if not dev.is_conflict_disk(conn):
             return False
@@ -733,7 +733,7 @@ def disk_prompt(conn, origpath, origsize, origsparse,
                 logging.error(e)
                 continue
             else:
-                fail(_("Error with storage parameters: %s" % str(e)))
+                fail(_("Error with storage parameters: %s") % str(e))
 
         # Check if path exists
         if prompt_path_exists(dev):
@@ -1515,7 +1515,7 @@ def parse_disk(guest, optstr, dev=None):
                 # It's default. Nothing to do.
                 pass
             else:
-                fail(_("Unknown '%s' value '%s'" % ("perms", val)))
+                fail(_("Unknown '%s' value '%s'") % ("perms", val))
 
         return ro, shared
 
@@ -1525,7 +1525,7 @@ def parse_disk(guest, optstr, dev=None):
             try:
                 newsize = float(val)
             except Exception, e:
-                fail(_("Improper value for 'size': %s" % str(e)))
+                fail(_("Improper value for 'size': %s") % str(e))
 
         return newsize
 
-- 
2.3.6

