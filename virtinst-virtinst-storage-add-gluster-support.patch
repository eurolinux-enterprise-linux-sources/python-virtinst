From b25131177f3e153e0fb604d3b4f89dd3330272e1 Mon Sep 17 00:00:00 2001
From: Giuseppe Scrivano <gscrivan@redhat.com>
Date: Tue, 1 Apr 2014 15:21:13 +0200
Subject: [PATCH] virtinst, storage: add gluster support

RHEL-only

Signed-off-by: Giuseppe Scrivano <gscrivan@redhat.com>
---
 virtinst/Storage.py | 70 +++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 65 insertions(+), 5 deletions(-)

diff --git a/virtinst/Storage.py b/virtinst/Storage.py
index 56a19ad..8aba79a 100644
--- a/virtinst/Storage.py
+++ b/virtinst/Storage.py
@@ -1,5 +1,5 @@
 #
-# Copyright 2008, 2013 Red Hat, Inc.
+# Copyright 2008, 2014 Red Hat, Inc.
 # Cole Robinson <crobinso@redhat.com>
 #
 # This program is free software; you can redistribute it and/or modify
@@ -243,6 +243,8 @@ class StoragePool(StorageObject):
     TYPE_ISCSI   = "iscsi"
     TYPE_SCSI    = "scsi"
     TYPE_MPATH   = "mpath"
+    TYPE_GLUSTER = "gluster"
+
     """@group Types: TYPE_*"""
 
     # Pool type descriptions for use in higher level programs
@@ -255,6 +257,7 @@ class StoragePool(StorageObject):
     _types[TYPE_ISCSI]   = _("iSCSI Target")
     _types[TYPE_SCSI]    = _("SCSI Host Adapter")
     _types[TYPE_MPATH]   = _("Multipath Device Enumerator")
+    _types[TYPE_GLUSTER] = _("Gluster Filesystem")
 
     def get_pool_class(ptype):
         """
@@ -281,6 +284,8 @@ class StoragePool(StorageObject):
             return SCSIPool
         if ptype == StoragePool.TYPE_MPATH:
             return MultipathPool
+        if ptype == StoragePool.TYPE_GLUSTER:
+            return GlusterPool
     get_pool_class = staticmethod(get_pool_class)
 
     def get_volume_for_pool(pool_type):
@@ -428,14 +433,15 @@ class StoragePool(StorageObject):
         raise NotImplementedError()
 
     def _get_storage_xml(self):
-        src_xml = ""
+        tar_xml = src_xml = ""
         if self._get_source_xml() != "":
             src_xml = "  <source>\n" + \
                       "%s" % (self._get_source_xml()) + \
                       "  </source>\n"
-        tar_xml = "  <target>\n" + \
-                  "%s" % (self._get_target_xml()) + \
-                  "  </target>\n"
+        if self._get_target_xml():
+            tar_xml = "  <target>\n" + \
+                      "%s" % (self._get_target_xml()) + \
+                      "  </target>\n"
 
         return "  <uuid>%s</uuid>\n" % (self.uuid or self._random_uuid) + \
                "%s" % src_xml + \
@@ -947,6 +953,60 @@ class MultipathPool(StoragePool):
     def _get_source_xml(self):
         return ""
 
+class GlusterPool(StoragePool):
+    """
+    Create a Gluster based storage pool
+    """
+    def set_source_path(self, val):
+        self._source_path = val
+
+    def get_volume_class():
+        raise NotImplementedError(_("Gluster volume creation is not "
+                                    "supported."))
+    get_volume_class = staticmethod(get_volume_class)
+
+    source_path = property(StoragePool.get_source_path,
+                           set_source_path,
+                           doc=_("Path on the host that is being shared."))
+    host = property(StoragePool.get_host, StoragePool.set_host,
+                    doc=_("Name of the host sharing the storage."))
+
+    def _get_default_target_path(self):
+        return None
+
+    def _get_target_xml(self):
+        return None
+
+    def get_source_name(self):
+        return self._source_name
+
+    def set_source_name(self, val):
+        self._source_name = val
+    source_name = property(get_source_name, set_source_name,
+                           doc=_("Name of the Volume Group"))
+
+    def __init__(self, conn, name, source_path=None, host=None, uuid=None,
+                 source_name=None):
+        StoragePool.__init__(self, name=name, type=StoragePool.TYPE_GLUSTER,
+                             uuid=uuid, conn=conn)
+        delattr(self, "target_path")
+
+        self.source_name = source_name or ""
+        if source_path:
+            self.source_path = source_path
+        if host:
+            self.host = host
+
+    def _get_source_xml(self):
+        if not self.host:
+            raise RuntimeError(_("Hostname is required"))
+        if not self.source_path:
+            raise RuntimeError(_("Host path is required"))
+        xml = """    <host name="%s"/>\n""" % self.host + \
+              """    <name>%s</name>\n""" % escape(self.source_name) + \
+              """    <dir path="%s"/>\n""" % escape(self.source_path)
+        return xml
+
 """
 Storage Volume classes
 """
-- 
1.9.0

